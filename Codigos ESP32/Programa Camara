//LIBRERIAS
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "Base64.h"
#include "esp_camera.h"

#include <WifiUDP.h>
#include <NTPClient.h>
#include <Time.h>
#include <TimeLib.h>
#include <Timezone.h>

// Configuraci칩n de red Wi-Fi
const char* ssid = "BLab";             //your network SSID
const char* password = "Biolab123!";  //your network password

//VARIABLES DRIVE//
String myScript = "/macros/s/AKfycbxpg_UumtRmkTgJveOxm3DIx1BbW6sVtXg9aBoK2Xual_RnuVX9dXOt_DGwC3obN9J3Ng/exec";  //Create your Google Apps Script and replace the "myScript" path.
String myFoldername = "&myFoldername=ESP32-CAM"; //Nombre de la carpeta donde se guarda la foto (ESP32-CAM)
String myImage = "&myFile=";

int photoCount = 1;
unsigned long Tiempoultimafoto = 3700000;    // Variable para almacenar el tiempo de la captura anterior
unsigned long Intervalofotos = 3600000;  // Intervalo de tiempo entre capturas (en milisegundos)

String fechahora;

// Definir propiedades NTP
#define NTP_OFFSET 60 * 60          // En segundos
#define NTP_INTERVAL 60 * 1000      // En milisegundos
#define NTP_ADDRESS "pool.ntp.org"  // URL NTP

WiFiUDP ntpUDP;  // Configura el cliente NTP UDP
NTPClient timeClient(ntpUDP, NTP_ADDRESS, NTP_OFFSET, NTP_INTERVAL);
TimeChangeRule CEST = { "CEST", Last, Sun, Mar, 2, 60 };  // Hora de Verano de Europa Central
TimeChangeRule CET = { "CET ", Last, Sun, Oct, 3, 0 };    // Hora Estandar de Europa Central
Timezone CE(CEST, CET);
time_t local, utc;

const char* days[] = { "Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado" };              // Configurar Fecha y hora
const char* months[] = { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" };  // Configurar Fecha y hora


//CAMERA_MODEL_AI_THINKER
#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27

#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22

void setup() {
  // Configuraci칩n del flash
  ledcAttachPin(4, 3);
  ledcSetup(3, 5000, 8);
  ledcWrite(3, 0);  // Apaga el flash inicialmente

  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);

  Serial.begin(115200);
  Serial.println("Iniciando...");

  WiFi.mode(WIFI_STA);

  Serial.println("");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  long int StartTime = millis();
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to Wi-Fi");

  Serial.println("");
  Serial.println("STAIP address: ");
  Serial.println(WiFi.localIP());

  Serial.println("");

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Reset");
    delay(1000);
    ESP.restart();
  } else {
    ledcAttachPin(4, 3);
    ledcSetup(3, 5000, 8);
    for (int i = 0; i < 5; i++) {
      ledcWrite(3, 10);
      delay(200);
      ledcWrite(3, 0);
      delay(200);
    }
    ledcDetachPin(3);
  }

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;  //0-63 numeros peque침os -> mayor calidad
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;  //0-63 numeros peque침os -> mayor calidad
    config.fb_count = 1;
  }

  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000); 
    ESP.restart();
  }

  sensor_t* s = esp_camera_sensor_get();
  s->set_framesize(s, FRAMESIZE_VGA);  // UXGA|SXGA|XGA|SVGA|VGA|CIF|QVGA|HQVGA|QQVGA
}

void loop() {
  if (millis() - Tiempoultimafoto > Intervalofotos) {
    // Encender el flash
    ledcWrite(3, 255);
    Serial.println("Flash encendido");
    delay(200);
    //Hacer foto
    SendCapturedImage();
    Serial.println("Foto subida");
    // Apagar el flash
    ledcWrite(3, 0);
    Serial.println("Flash apagado");
    Tiempoultimafoto = millis();
  }
}

String SendCapturedImage() {

  timeClient.update();  // Actualizar el cliente NTP y obtener la marca de tiempo UNIX UTC
  unsigned long utc = timeClient.getEpochTime();
  local = CE.toLocal(utc);  // Convertir marca de tiempo UTC UNIX a hora local
  String fechahora = prueba(local);

  const char* myDomain = "script.google.com";
  String getAll = "", getBody = "";
  String myFilename = "&myFilename=" + fechahora + ".jpg";

  // Encender el flash
  //ledcWrite(3, 255);

  camera_fb_t* fb = NULL;
  fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    delay(1000); 
    ESP.restart();
    return "Camera capture failed";
  }


  Serial.println("Connect to " + String(myDomain));
  WiFiClientSecure client_tcp;
  client_tcp.setInsecure();

  if (client_tcp.connect(myDomain, 443)) {
    Serial.println("Connection successful");

    char* input = (char*)fb->buf;
    char output[base64_enc_len(3)];
    String imageFile = "data:image/jpeg;base64,";
    for (int i = 0; i < fb->len; i++) {
      base64_encode(output, (input++), 3);
      if (i % 3 == 0) imageFile += urlencode(String(output));
    }
    String Data = myFoldername + myFilename + myImage;
    photoCount++;

    client_tcp.println("POST " + myScript + " HTTP/1.1");
    client_tcp.println("Host: " + String(myDomain));
    client_tcp.println("Content-Length: " + String(Data.length() + imageFile.length()));
    client_tcp.println("Content-Type: application/x-www-form-urlencoded");
    client_tcp.println("Connection: keep-alive");
    client_tcp.println();

    client_tcp.print(Data);
    int Index;
    for (Index = 0; Index < imageFile.length(); Index = Index + 1000) {
      client_tcp.print(imageFile.substring(Index, Index + 1000));
    }
    esp_camera_fb_return(fb);

    int waitTime = 10000;  // timeout 10 seconds
    long startTime = millis();
    boolean state = false;

    while ((startTime + waitTime) > millis()) {
      Serial.print(".");
      delay(100);
      while (client_tcp.available()) {
        char c = client_tcp.read();
        if (state == true) getBody += String(c);
        if (c == '\n') {
          if (getAll.length() == 0) state = true;
          getAll = "";
        } else if (c != '\r')
          getAll += String(c);
        startTime = millis();
      }
      if (getBody.length() > 0) break;
    }
    client_tcp.stop();
    Serial.println(getBody);
  } else {
    getBody = "Connected to " + String(myDomain) + " failed.";
    Serial.println("Connected to " + String(myDomain) + " failed.");
  }

  return getBody;
}


String urlencode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  char code2;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      code2 = '\0';
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
      //encodedString+=code2;
    }
    yield();
  }
  return encodedString;
}

String prueba(time_t t)  // Funcion para formatear en texto la fecha
{
  String date = "";
  date += days[weekday(t) - 1];
  date += "_";
  date += day(t);
  date += "_";
  date += months[month(t) - 1];
  date += "_";
  date += year(t);
  date += "_";

  String hora = "";  // Funcion para formatear en texto la hora
  if (hour(t) < 10)
    hora += "0";
  hora += hour(t);
  hora += ":";
  if (minute(t) < 10)  // Agregar un cero si el minuto es menor de 10
    hora += "0";
  hora += minute(t);

  fechahora = date + hora;
  return fechahora;
}
