//Bibliotecas
#include <SD.h>      //Biblioteca necesaria para Tarjeta SD
#include <RTClib.h>  //Bibliotecas necesarias para Módulo RTC

//Variable tipo File
File myFile;
RTC_DS1307 rtc;
DateTime now;

//Variables para que funcione el programa de ejemplo
float Tactual1=10;
float Hactual1=80;
float Tactual2=15;
float Hactual2=83;
float Tactual=(Tactual1+Tactual2)/2;
float Hactual=(Hactual1+Hactual2)/2;
float Tdeseada;
float Hdeseada;
float TdeseadaRemota;
float HdeseadaRemota;
unsigned long ultimoEnvioSD = 0;
unsigned long ultimoEnvioESP = 0;
String inputString="";
bool stringComplete=false;

//Macros
#define medidaSize 210        //NO CAMBIAR. Tamaño en caracteres de la escritura exacta de una medida
#define maxBuffSize 100000    //Cambiar al tamaño que se quiera. Ahora almacena aprox 476 medidas
#define intervaloEnvio 10000  //Cambiar al intervalo que se quiera

//Puertos Necesarios
#define CS 2   //X defecto es 4, pero necesitamos que sea el 2



//FUNCIONES TARJETA SD
//Función para almacenar fecha y hora en un string
String obtenerFechaHora(DateTime t) {
  String fechaHora = "";
  fechaHora += t.day();
  fechaHora += '/';
  fechaHora += t.month();
  fechaHora += '/';
  fechaHora += t.year();
  fechaHora += " - ";
  fechaHora += t.hour();
  fechaHora += ':';
  if (t.minute() < 10) fechaHora += '0';  // Añadir un 0 si el minuto es menor a 10
  fechaHora += t.minute();
  fechaHora += ':';
  if (t.second() < 10) fechaHora += '0';  // Añadir un 0 si el segundo es menor a 10
  fechaHora += t.second();
  return fechaHora;
}

//Función para almacenar lectura de los sensores en un string
String obtenerDatosSensoresSD(){
  String datos = "";
  datos += "Datos sensor arriba:  TEMPERATURA - ";
  if (Tactual1<10) datos+='0';
  datos += String(Tactual1,2);
  datos += "ºC   HUMEDAD - ";
  if (Hactual1<10) datos+='0';
  datos += String(Hactual1,2);
  datos += "%\n";
  datos += "Datos sensor abajo:  TEMPERATURA - ";
  if (Tactual2<10) datos+='0';
  datos += String(Tactual2, 2);
  datos += "ºC   HUMEDAD - ";
  if (Hactual2<10) datos+='0';
  datos += String(Hactual2, 2);
  datos += "%\n";
  datos += "Datos armario:  TEMPERATURA - ";
  if (Tactual<10) datos+='0';
  datos += String(Tactual, 2);
  datos += "ºC   HUMEDAD - ";
  if (Hactual<10) datos+='0';
  datos += String(Hactual, 2);
  datos += "%\n";
  return datos;
}

//Función para borrar primera medida de la tarjeta SD si no cabe 
void recortarArchivo(const char* nombreArchivo){  //para pasarle el archivo original
//LECTURA CONTENIDO FICHERO A PARTIR DE LA 2ª MEDIDA
  File archivo=SD.open(nombreArchivo, FILE_READ);
  if(!archivo){
    Serial.print("Error al abrir el archivo para recortar");
    return;
  }
  archivo.seek(medidaSize);  //Desplazar cursor al ppo de 2ª medida
  String newArchivo="";      //Variable almacenamiento fichero desde ppo 2ª medida
  while(archivo.available()) newArchivo+=(char)archivo.read(); //Almacenar contenido fichero
  archivo.close();

  //ESCRITURA CONTENIDO FICHERO A PARTIR DE LA 2ª MEDIDA
  SD.remove(nombreArchivo);  //Borramos el contenido del fichero para no sobreescribir erroneamente
  archivo=SD.open(nombreArchivo, FILE_WRITE);
  archivo.print(newArchivo); //Sobreescribimos el contenido del fichero
  archivo.close();

  Serial.println("Archivo recortado exitosamente");
}

//FUNCIONES ESP32
//Función para almacenar lectura de los sensores en un string
String obtenerDatosSensoresESP(){
  String datos="";
  datos+=Tactual1;
  datos+='_';
  datos+=Hactual1;
  datos+='_';
  datos+=Tactual2;
  datos+='_';
  datos+=Hactual2;
  datos+='_';
  datos+=Tactual;
  datos+='_';
  datos+=Hactual;
  datos+='_';
  datos+=Tdeseada;
  datos+='_';
  datos+=Hdeseada;
  datos+='-';
  return datos;
}

//Función para avisar que se reciben datos por el Serial1
void serialEvent() {
  while (Serial1.available()) {          //.available()=true si hay datos en el buffer de recepción
    char inChar = (char)Serial1.read();  //lee el primer caracter en el buffer y lo guarda en char
    inputString += inChar;               //almacena cada caracter en un string
    if (inChar == '-') stringComplete = true;  //'-' = char que indica fin de cadena en el buffer
  }   //se pasa al siguiente elemento del buffer y se vuelve a evaluar el while
}


//INICIALIZACIÓN CONEXIÓN TARJETA SD
void setup(){
  //Inicialización
  Serial.begin(115200);
  Serial1.begin(115200);

  //INICIALIZACIÓN TARJETA SD
  Serial.println("Iniciando SD CTG");
  if (!SD.begin(CS)) {  //Comprueba que esté conectado el CSPIN
    Serial.println("No se pudo inicializar la tarjeta SD");
    return;
  }
  else Serial.println("Inicializacion exitosa CTG");

  //INICIALIZACIÓN MÓDULO RTC
  if (!rtc.begin()) {
    Serial.println("No se puede encontrar RTC");
    while (1);
  }
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); // Ajusta el RTC con la hora de compilación
  now = rtc.now();
  Serial.println(obtenerFechaHora(now));
}

void EnvioTarjetaSD(){
  if((millis()- ultimoEnvioSD)>intervaloEnvio){
    now = rtc.now();
    myFile = SD.open("archivo.txt", FILE_WRITE); //Abrir archivo de toma de datos en modo escritura
    if (myFile) {
      Serial.println("Escribiendo datos sensores en SD");  //Mientras haya espacio en la tarjeta SD
      myFile.println(obtenerFechaHora(now));
      myFile.println(obtenerDatosSensoresSD());
      Serial.println(obtenerFechaHora(now));
      Serial.println(obtenerDatosSensoresSD());
      ultimoEnvioSD = millis();
      myFile.close();

      //Comprobamos tamaño del archivo y recortamos si necesario
      if (SD.open("archivo.txt").size() > maxBuffSize) recortarArchivo("archivo.txt");
    }
    else Serial.println("Error al escribir datos de los sensores en la tarjeta SD");
  }
}

void EnvioDatosESP(){
  if ((millis() - ultimoEnvioESP) > intervaloEnvio) {
    Serial.println(obtenerDatosSensoresESP());
    Serial1.println(obtenerDatosSensoresESP());
    ultimoEnvioESP = millis();
  }
}

void LecturaDatosESP() {
  serialEvent();
  if (stringComplete) {
    Serial.print("Datos recibidos del ESP:");
    Serial.println(inputString);

    int pos1 = inputString.indexOf('_');
    TdeseadaRemota = inputString.substring(0, pos1).toFloat();
    Tdeseada = TdeseadaRemota;
    Serial.print("Tdeseada:");
    Serial.println(Tdeseada);

    HdeseadaRemota = inputString.substring(pos1 + 1, (inputString.length() - 1)).toFloat();
    Hdeseada = HdeseadaRemota;
    Serial.print("Hdeseada:");
    Serial.println(Hdeseada);

    inputString = "";
    stringComplete = false;
  }
}

void loop(){
  EnvioTarjetaSD();
  EnvioDatosESP();
  LecturaDatosESP();
}
