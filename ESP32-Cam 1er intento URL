//Proporcionado por la plataforma de Blynk
//Estas lineas tienen que ser SIEMPRE las primeras
#define BLYNK_TEMPLATE_ID "TMPL5Hczr7GZk"
#define BLYNK_TEMPLATE_NAME "ESP32 ARMARIO CULTIVO"
#define BLYNK_AUTH_TOKEN "nunBXZcBClp6_ABsFDkQPuW4HhrrhW74"

//BIBLIOTECAS NECESARIAS
//Conexión WiFi
#include <WiFi.h>
#include <WiFiClientSecure.h>
//Caputura y Almacenamiento de Fotos
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "Base64.h"
#include "esp_camera.h"
//Blynk
#include <BlynkSimpleEsp32.h>


//Credenciales WiFi
const char* ssid = "Abcdefg";   //your network SSID
const char* password = "gatitosperritos123";   //your network password

//Variables necesarias conexión con Google Apps Scrit y Drive
const char* myDomain = "script.google.com";
String myScript = "/macros/s/AKfycbwUgT2_uMfGynZTGTt9zzOkxX1bQT0tEmDFeUdELAqRisK489YtCIeu9XTfyaMG0iaq/exec";    //Replace with your own url
String myFilename = "filename=ESP32-CAM.jpg";
String mimeType = "&mimetype=image/jpeg";
String myImage = "&data=";

//Variables de tiempo
int waitingTime = 60000; //Wait 30 seconds to google response.
long int StartTime=31000;

//Puertos para ESP32
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

//Variables para Blynk
#define MAX_IMAGES 10
String imagesURLs[MAX_IMAGES];
unsigned long ultimoUpdate = 0;
unsigned long intervaloUpdate = 180000;  ///3 segundos


//===================================FUNCIONES====================================================
//-----------------------------------TOMA DE FOTOS------------------------------------------------
void saveCapturedImage(){
  Serial.println("Connect to " + String(myDomain));
  WiFiClientSecure client;
  client.setInsecure();

  if (client.connect(myDomain, 443)) {
    Serial.println("Connection successful");
    
    camera_fb_t * fb = NULL;
    fb = esp_camera_fb_get();  
    if(!fb) {
      Serial.println("Camera capture failed");
      delay(1000);
      ESP.restart();
      return;
    }
  
    char *input = (char *)fb->buf;
    char output[base64_enc_len(3)];
    String imageFile = "";
    for (int i=0;i<fb->len;i++) {
      base64_encode(output, (input++), 3);
      if (i%3==0) imageFile += urlencode(String(output));
    }
    String Data = myFilename+mimeType+myImage;
    
    esp_camera_fb_return(fb);
    
    Serial.println("Send a captured image to Google Drive.");
    
    client.println("POST " + myScript + " HTTP/1.1");
    client.println("Host: " + String(myDomain));
    client.println("Content-Length: " + String(Data.length()+imageFile.length()));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println();
    client.print(Data);

    int Index;
    for (Index = 0; Index < imageFile.length(); Index = Index+1000) {
      client.print(imageFile.substring(Index, Index+1000));
    }
    
    Serial.println("Waiting for response.");
    //long int StartTime=millis();
    while (!client.available()) {
      Serial.print(".");
      delay(100);
      if ((StartTime+waitingTime) < millis()) {
        Serial.println();
        Serial.println("No response.");
        //If you have no response, maybe need a greater value of waitingTime
        StartTime=millis();
        break;
      }
    }
    Serial.println();   

    String response = "";
    if(client.available()) Serial.println("Connected to " + String(myDomain) + " successfully.");
    while (client.available()) {
      Serial.write(client.read());
      char c = client.read();
      response += c;
      delay(5);
    }

    Serial.println("Response from server:");
    Serial.println(response);
    Serial.println(); Serial.println(); Serial.println();
    
    if (response.indexOf("imageUrl") != -1) {
      // Buscar y extraer la URL de la respuesta JSON
      int urlStart = response.indexOf("https://");
      int urlEnd = response.indexOf("\"", urlStart);
      String imageUrl = response.substring(urlStart, urlEnd);
      updateURLs(imageUrl);
      Serial.println("Image URL: " + imageUrl);  // Mostrar la URL en el Serial Monitor
    } else {
      Serial.println("No image URL found in the response.");
    }

  }
  else {         
    Serial.println("Connected to " + String(myDomain) + " failed.");
  }
  client.stop();
}

String urlencode(String str){
    String encodedString="";
    char c;
    char code0;
    char code1;
    for (int i =0; i < str.length(); i++){
      c=str.charAt(i);
      if (c == ' ') encodedString+= '+';
      else if (isalnum(c)) encodedString+=c;
      else{
        code1=(c & 0xf)+'0';
        if ((c & 0xf) >9) code1=(c & 0xf) - 10 + 'A';
        c=(c>>4)&0xf;
        code0=c+'0';
        if (c > 9) code0=c - 10 + 'A';
        encodedString+='%';
        encodedString+=code0;
        encodedString+=code1;
      }
      yield();
    }
    return encodedString;
}

void wifiConfig(){
  WiFi.mode(WIFI_STA);

  Serial.println("");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);  

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("");
  Serial.println("STAIP address: ");
  Serial.println(WiFi.localIP());
  Serial.println("");
}

void cameraConfig(){
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_VGA;  // UXGA|SXGA|XGA|SVGA|VGA|CIF|QVGA|HQVGA|QQVGA
  config.jpeg_quality = 10;
  config.fb_count = 1;
  
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000);
    ESP.restart();
  }
}
//------------------------------------------------------------------------------------------------

//-----------------------------------ENVÍO DE FOTOS A BLYNK---------------------------------------

void updateURLs(String newURL){
  if((millis()-ultimoUpdate)>intervaloUpdate){  //creo que el if se puede quitar por el delay 60000 del loop()
    for(int i=0; i<MAX_IMAGES-2;i++) imagesURLs[i]=imagesURLs[i+1];
    imagesURLs[MAX_IMAGES-1]=newURL;
    for(int i=0; i<MAX_IMAGES-1;i++) Blynk.setProperty(V8, "url", i, imagesURLs[i]);
    ultimoUpdate=millis();
  }
}

//------------------------------------------------------------------------------------------------

void setup(){
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  
  Serial.begin(115200);
  delay(10);
  
  wifiConfig();
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
  delay(10);
  cameraConfig();
}

boolean enviar = true;

void loop(){
  Blynk.run();
  saveCapturedImage();
  enviar = false;
  delay(60000);
}
